// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type TestingT struct {
	ErrorfStub        func(string, ...interface{})
	errorfMutex       sync.RWMutex
	errorfArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	HelperStub        func()
	helperMutex       sync.RWMutex
	helperArgsForCall []struct {
	}
	LogfStub        func(string, ...interface{})
	logfMutex       sync.RWMutex
	logfArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TestingT) Errorf(arg1 string, arg2 ...interface{}) {
	fake.errorfMutex.Lock()
	fake.errorfArgsForCall = append(fake.errorfArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	stub := fake.ErrorfStub
	fake.recordInvocation("Errorf", []interface{}{arg1, arg2})
	fake.errorfMutex.Unlock()
	if stub != nil {
		fake.ErrorfStub(arg1, arg2...)
	}
}

func (fake *TestingT) ErrorfCallCount() int {
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	return len(fake.errorfArgsForCall)
}

func (fake *TestingT) ErrorfCalls(stub func(string, ...interface{})) {
	fake.errorfMutex.Lock()
	defer fake.errorfMutex.Unlock()
	fake.ErrorfStub = stub
}

func (fake *TestingT) ErrorfArgsForCall(i int) (string, []interface{}) {
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	argsForCall := fake.errorfArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TestingT) Helper() {
	fake.helperMutex.Lock()
	fake.helperArgsForCall = append(fake.helperArgsForCall, struct {
	}{})
	stub := fake.HelperStub
	fake.recordInvocation("Helper", []interface{}{})
	fake.helperMutex.Unlock()
	if stub != nil {
		fake.HelperStub()
	}
}

func (fake *TestingT) HelperCallCount() int {
	fake.helperMutex.RLock()
	defer fake.helperMutex.RUnlock()
	return len(fake.helperArgsForCall)
}

func (fake *TestingT) HelperCalls(stub func()) {
	fake.helperMutex.Lock()
	defer fake.helperMutex.Unlock()
	fake.HelperStub = stub
}

func (fake *TestingT) Logf(arg1 string, arg2 ...interface{}) {
	fake.logfMutex.Lock()
	fake.logfArgsForCall = append(fake.logfArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	stub := fake.LogfStub
	fake.recordInvocation("Logf", []interface{}{arg1, arg2})
	fake.logfMutex.Unlock()
	if stub != nil {
		fake.LogfStub(arg1, arg2...)
	}
}

func (fake *TestingT) LogfCallCount() int {
	fake.logfMutex.RLock()
	defer fake.logfMutex.RUnlock()
	return len(fake.logfArgsForCall)
}

func (fake *TestingT) LogfCalls(stub func(string, ...interface{})) {
	fake.logfMutex.Lock()
	defer fake.logfMutex.Unlock()
	fake.LogfStub = stub
}

func (fake *TestingT) LogfArgsForCall(i int) (string, []interface{}) {
	fake.logfMutex.RLock()
	defer fake.logfMutex.RUnlock()
	argsForCall := fake.logfArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TestingT) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	fake.helperMutex.RLock()
	defer fake.helperMutex.RUnlock()
	fake.logfMutex.RLock()
	defer fake.logfMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TestingT) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
